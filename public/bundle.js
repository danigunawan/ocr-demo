/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports) {


// "dragleave"イベントが子要素で発火する問題の対応策
// 1. カウンター方式
// 2. pointer-events: none;方式 (子要素でイベントが不必要な場合)
let dragCounter = 0;

function blockEventPropagation(event) {
  event.stopPropagation();
  event.preventDefault();
}

function activateDropZone(zone, activate = false) {
  zone.classList.toggle('dropzone--active', activate);
}

const dropZone = document.getElementById('dropzone');
dropZone.addEventListener('dragover', e => {
  blockEventPropagation(e);
  e.dataTransfer.dropEffect = 'copy';
});

dropZone.addEventListener('dragenter', e => {
  dragCounter += 1;
  activateDropZone(e.currentTarget, true);
});

dropZone.addEventListener('dragleave', e => {
  dragCounter -= 1;
  if (dragCounter === 0) {
    activateDropZone(e.currentTarget, false);
  }
});

dropZone.addEventListener('drop', e => {
  dragCounter = 0;
  blockEventPropagation(e);
  activateDropZone(e.currentTarget, false);
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyY1xcbWFpbi5qcyJdLCJuYW1lcyI6WyJkcmFnQ291bnRlciIsImJsb2NrRXZlbnRQcm9wYWdhdGlvbiIsImV2ZW50Iiwic3RvcFByb3BhZ2F0aW9uIiwicHJldmVudERlZmF1bHQiLCJhY3RpdmF0ZURyb3Bab25lIiwiem9uZSIsImFjdGl2YXRlIiwiY2xhc3NMaXN0IiwidG9nZ2xlIiwiZHJvcFpvbmUiLCJkb2N1bWVudCIsImdldEVsZW1lbnRCeUlkIiwiYWRkRXZlbnRMaXN0ZW5lciIsImUiLCJkYXRhVHJhbnNmZXIiLCJkcm9wRWZmZWN0IiwiY3VycmVudFRhcmdldCJdLCJtYXBwaW5ncyI6IjtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUlBLGNBQWMsQ0FBbEI7O0FBRUEsU0FBU0MscUJBQVQsQ0FBK0JDLEtBQS9CLEVBQXNDO0FBQ3BDQSxRQUFNQyxlQUFOO0FBQ0FELFFBQU1FLGNBQU47QUFDRDs7QUFFRCxTQUFTQyxnQkFBVCxDQUEwQkMsSUFBMUIsRUFBNkNDLFdBQVcsS0FBeEQsRUFBK0Q7QUFDN0RELE9BQUtFLFNBQUwsQ0FBZUMsTUFBZixDQUFzQixrQkFBdEIsRUFBMENGLFFBQTFDO0FBQ0Q7O0FBRUQsTUFBTUcsV0FBV0MsU0FBU0MsY0FBVCxDQUF3QixVQUF4QixDQUFqQjtBQUNBRixTQUFTRyxnQkFBVCxDQUEwQixVQUExQixFQUFzQ0MsS0FBSztBQUN6Q2Isd0JBQXNCYSxDQUF0QjtBQUNBQSxJQUFFQyxZQUFGLENBQWVDLFVBQWYsR0FBNEIsTUFBNUI7QUFDRCxDQUhEOztBQUtBTixTQUFTRyxnQkFBVCxDQUEwQixXQUExQixFQUF1Q0MsS0FBSztBQUMxQ2QsaUJBQWUsQ0FBZjtBQUNBSyxtQkFBaUJTLEVBQUVHLGFBQW5CLEVBQWtDLElBQWxDO0FBQ0QsQ0FIRDs7QUFLQVAsU0FBU0csZ0JBQVQsQ0FBMEIsV0FBMUIsRUFBdUNDLEtBQUs7QUFDMUNkLGlCQUFlLENBQWY7QUFDQSxNQUFJQSxnQkFBZ0IsQ0FBcEIsRUFBdUI7QUFDckJLLHFCQUFpQlMsRUFBRUcsYUFBbkIsRUFBa0MsS0FBbEM7QUFDRDtBQUNGLENBTEQ7O0FBT0FQLFNBQVNHLGdCQUFULENBQTBCLE1BQTFCLEVBQWtDQyxLQUFLO0FBQ3JDZCxnQkFBYyxDQUFkO0FBQ0FDLHdCQUFzQmEsQ0FBdEI7QUFDQVQsbUJBQWlCUyxFQUFFRyxhQUFuQixFQUFrQyxLQUFsQztBQUNELENBSkQiLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZVJvb3QiOiJEOi9HaXQvR2l0SHViL29jci1kZW1vIiwic291cmNlc0NvbnRlbnQiOlsiLyogQGZsb3cgKi9cbi8vIFwiZHJhZ2xlYXZlXCLjgqTjg5njg7Pjg4jjgYzlrZDopoHntKDjgafnmbrngavjgZnjgovllY/poYzjga7lr77lv5znrZZcbi8vIDEuIOOCq+OCpuODs+OCv+ODvOaWueW8j1xuLy8gMi4gcG9pbnRlci1ldmVudHM6IG5vbmU75pa55byPICjlrZDopoHntKDjgafjgqTjg5njg7Pjg4jjgYzkuI3lv4XopoHjgarloLTlkIgpXG5sZXQgZHJhZ0NvdW50ZXIgPSAwXG5cbmZ1bmN0aW9uIGJsb2NrRXZlbnRQcm9wYWdhdGlvbihldmVudCkge1xuICBldmVudC5zdG9wUHJvcGFnYXRpb24oKVxuICBldmVudC5wcmV2ZW50RGVmYXVsdCgpXG59XG5cbmZ1bmN0aW9uIGFjdGl2YXRlRHJvcFpvbmUoem9uZTogSFRNTEVsZW1lbnQsIGFjdGl2YXRlID0gZmFsc2UpIHtcbiAgem9uZS5jbGFzc0xpc3QudG9nZ2xlKCdkcm9wem9uZS0tYWN0aXZlJywgYWN0aXZhdGUpXG59XG5cbmNvbnN0IGRyb3Bab25lID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2Ryb3B6b25lJylcbmRyb3Bab25lLmFkZEV2ZW50TGlzdGVuZXIoJ2RyYWdvdmVyJywgZSA9PiB7XG4gIGJsb2NrRXZlbnRQcm9wYWdhdGlvbihlKVxuICBlLmRhdGFUcmFuc2Zlci5kcm9wRWZmZWN0ID0gJ2NvcHknXG59KVxuXG5kcm9wWm9uZS5hZGRFdmVudExpc3RlbmVyKCdkcmFnZW50ZXInLCBlID0+IHtcbiAgZHJhZ0NvdW50ZXIgKz0gMVxuICBhY3RpdmF0ZURyb3Bab25lKGUuY3VycmVudFRhcmdldCwgdHJ1ZSlcbn0pXG5cbmRyb3Bab25lLmFkZEV2ZW50TGlzdGVuZXIoJ2RyYWdsZWF2ZScsIGUgPT4ge1xuICBkcmFnQ291bnRlciAtPSAxXG4gIGlmIChkcmFnQ291bnRlciA9PT0gMCkge1xuICAgIGFjdGl2YXRlRHJvcFpvbmUoZS5jdXJyZW50VGFyZ2V0LCBmYWxzZSlcbiAgfVxufSlcblxuZHJvcFpvbmUuYWRkRXZlbnRMaXN0ZW5lcignZHJvcCcsIGUgPT4ge1xuICBkcmFnQ291bnRlciA9IDBcbiAgYmxvY2tFdmVudFByb3BhZ2F0aW9uKGUpXG4gIGFjdGl2YXRlRHJvcFpvbmUoZS5jdXJyZW50VGFyZ2V0LCBmYWxzZSlcbn0pXG4iXX0=

/***/ })
/******/ ]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,